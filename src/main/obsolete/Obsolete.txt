// Tester.java
	private void classify(Chromosome best) {
		// WrongDecisionsFitnessCalculator fCalc = new
		// WrongDecisionsFitnessCalculator();
		// System.out.println("Imagini gresit clas: "
		// + fCalc.computeFitness(best, testRadiographies));
		// totalWrong += fCalc.computeFitness(best, testRadiographies);

		int wrong = 0;
		for (Radiography rad : testRadiographies) {
			double res = ChromosomeOperator.getOuputValue(best, rad);
			boolean decision = res < 0;
			if (decision != rad.isWithCancer()) {
				wrong++;
				// System.out.println(rad.getName());
			}
		}
		System.out.println("Imagini gresit clas: " + wrong);
		totalWrong += wrong;
		// if (wrong >= 3) {
		// for (Radiography r : testRadiographies) {
		// System.out.print(ChromosomeOperator.getOuputValue(best, r)
		// + " ");
		// }
		// System.out.println();
		// }
	}
	
		private void classifyAuc(Chromosome best) {
		int wrong = 0;
		for (Radiography r : testRadiographies) {
			double output = ChromosomeOperator.getOuputValue(best, r);
			boolean withCancer = hasCancer(output);
			if (withCancer != r.isWithCancer()) {
				wrong++;
				System.out.println(r.getName());
			}
		}
		System.out.println("Gresit: " + wrong);
		totalWrong += wrong;
	}
	
		private boolean hasCancer(double output) {
		int cancerNo = 0;
		int normalNo = 0;
		for (BigDecimal i = BigDecimal.ZERO; i.compareTo(BigDecimal.ONE) < 0; i = i
				.add(BigDecimal.valueOf(0.1))) {
			BigDecimal outputBigDec = BigDecimal.valueOf(output);
			if (outputBigDec.compareTo(i) >= 0) {
				cancerNo++;
			} else {
				normalNo++;
			}
		}
		return cancerNo > normalNo;
	}
	
	
	